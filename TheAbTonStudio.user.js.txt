// ==UserScript==
// @name         The AbTon Studio
// @namespace    http://tampermonkey.net/
// @version      3.2
// @description  Combined OTP handling, appointment automation, and payment integration for IVAC
// @author       AbTon
// @match        https://payment.ivacbd.com/
// @grant        none
// @resource     CONFIG https://raw.githubusercontent.com/mirabdullahkawsar/The-AbTon-Studio/main/ivac_config.json
// ==/UserScript==

const CONFIG = {
  application: {
    highcom: "3",
    webfile_id: "BGDRV05CD392",
    ivac_id: "3",
    visa_type: "3",
    family_count: "0",
    visit_purpose: "Needs urgent treatment"
  },
  personal: {
    full__name: "MD RAKIB MIA",
    email_name: "ratan.biswash88@gmail.com",
    pho_ne: "01935504360",
    web_file_id: "BGDRV02CD825",
    family_member: {
      name: "KULSUM AKTER",
      webfile_no: "BGDRV1430625"
    }
  }
};

(function() {
    'use strict';
    console.log("Initializing IVAC Automation by AbTon...");

    // Configuration
    const MAX_RETRIES = 50;
    const RETRY_DELAY = 2000;
    const PAYMENT_PAGE = "https://payment.ivacbd.com/payment";
    let isMainRunning = false;
    let selectedDate = null;
    let applicationInfoTimer = null;
    let personalInfoTimer = null;
    let overviewTimer = null;
    let isProcessing = false;

    // Common Utility Functions
    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

    function getCsrfToken() {
        const tokenElement = document.querySelector('input[name="_token"]');
        return tokenElement ? tokenElement.value : null;
    }

    function showTemporaryMessage(message, isError = true) {
        const msgDiv = document.createElement("div");
        msgDiv.textContent = message;
        Object.assign(msgDiv.style, {
            position: "fixed",
            top: "20px",
            left: "50%",
            transform: "translateX(-50%)",
            background: isError ? "#ff4d4d" : "#28a745",
            color: "white",
            padding: "10px 20px",
            borderRadius: "5px",
            fontSize: "16px",
            zIndex: "10002",
            boxShadow: "0 2px 10px rgba(0,0,0,0.2)"
        });
        document.body.appendChild(msgDiv);
        setTimeout(() => msgDiv.remove(), 3000);
    }

    async function loggedFetch(url, options) {
        if (isProcessing) return;
        isProcessing = true;

        console.groupCollapsed(`%cNetwork Request: ${url}`, 'color: #4CAF50; font-weight: bold');
        console.log('Request Options:', options);

        const startTime = performance.now();
        try {
            await delay(500); // Delay to show effect in network console
            const response = await fetch(url, options);
            const endTime = performance.now();

            console.log(`Status: ${response.status} ${response.statusText}`);
            console.log(`Time: ${(endTime - startTime).toFixed(2)}ms`);

            const clonedResponse = response.clone();
            try {
                const data = await clonedResponse.json();
                console.log('Response Data:', data);
            } catch (e) {
                console.log('Response is not JSON');
            }

            console.groupEnd();
            return response;
        } catch (error) {
            console.error('Fetch Error:', error);
        } finally {
            isProcessing = false;
        }
    }

    // Form submission functions
    async function Application_Info() {
        clearTimeout(applicationInfoTimer);
        const token = getCsrfToken();
        if (!token) {
            showTemporaryMessage("CSRF token not found for Application Info!");
            return;
        }

        const retry = async (attempt = 1) => {
            if (attempt > MAX_RETRIES) {
                showTemporaryMessage("Max retries reached for Application Info");
                return;
            }

            await loggedFetch("https://payment.ivacbd.com/application-info-submit", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
                },
                body: new URLSearchParams({
                    "_token": token,
                    "highcom": "3",
                    "webfile_id": "BGDRV05CD392",
                    "webfile_id_repeat": "BGDRV05CD392",
                    "ivac_id": "3",
                    "visa_type": "3",
                    "family_count": "0",
                    "visit_purpose": "Needs urgent treatment"
                }),
            });
        };

        retry();
    }

    async function Personal_Info() {
        clearTimeout(personalInfoTimer);
        const token = getCsrfToken();
        if (!token) {
            showTemporaryMessage("CSRF token not found for Personal Info!");
            return;
        }

        const retry = async (attempt = 1) => {
            if (attempt > MAX_RETRIES) {
                showTemporaryMessage("Max retries reached for Personal Info");
                return;
            }

            console.log("Submitting Personal Info...");
            await loggedFetch("https://payment.ivacbd.com/personal-info-submit", {
                method: "POST",
                headers:  {
                    "Content-Type": "application/x-www-form-urlencoded",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
                },
                body: new URLSearchParams({
                    "_token": token,
                    "full__name": "MD RAKIB MIA",
                    "email_name": "ratan.biswash88@gmail.com",
                    "pho_ne": "01935504360",
                    "web_file_id": "BGDRV02CD825",
                    "family[1][name]": "KULSUM AKTER",
                    "family[1][webfile_no]": "BGDRV1430625",
                    "family[1][again_webfile_no]": "BGDRV1430625"
                }),
            });
        };

        retry();
    }

    async function Overview() {
        clearTimeout(overviewTimer);
        const token = getCsrfToken();
        if (!token) {
            showTemporaryMessage("CSRF token not found for Overview!");
            return;
        }

        const retry = async (attempt = 1) => {
            if (attempt > MAX_RETRIES) {
                showTemporaryMessage("Max retries reached for Overview");
                return;
            }

        console.log("Submitting Overview...");
        await loggedFetch("https://payment.ivacbd.com/overview-submit", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            },
            body: new URLSearchParams({
                "_token": token
            }),
        });

        // window.open(PAYMENT_PAGE, "_blank");
        };

        retry();
    }

    function stopAllProcesses() {
        isProcessing = false;
        clearTimeout(applicationInfoTimer);
        clearTimeout(personalInfoTimer);
        clearTimeout(overviewTimer);
        isMainRunning = false;
        showTemporaryMessage("All processes stopped", false);
        console.log("All processes stopped");
    }

    // Create floating UI
    function createControlUI() {
        let container = document.createElement("div");
        container.id = "ivac-control-ui";
        container.style = `
            position: fixed;
            top: 330px;
            right: 30px;
            width: 200px;
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            z-index: 9999;
            font-family: Arial, sans-serif;
            border: 1px solid #ddd;
        `;

        // Close button
        const closeBtn = document.createElement("span");
        closeBtn.textContent = "✕";
        closeBtn.style = `
            position: absolute;
            top: 5px;
            right: 5px;
            cursor: pointer;
            font-weight: bold;
            color: #dc3545;
            font-size: 16px;
        `;
        closeBtn.addEventListener("click", () => {
            container.style.display = "none";
            showTemporaryMessage("Control panel hidden. Refresh page to show again.", false);
        });
        container.appendChild(closeBtn);

        // Header
        let header = document.createElement("div");
        header.textContent = " AbTon IVAC";
        header.style = `
            font-weight: bold;
            margin-bottom: 12px;
            text-align: center;
            color: #333;
            font-size: 16px;
        `;
        container.appendChild(header);

        // Button container
        let buttonContainer = document.createElement("div");
        buttonContainer.style = `
            display: grid;
            grid-template-columns: 1fr;
            gap: 8px;
        `;

        // Buttons
        const buttons = [
            { text: "Application Info", color: "#28a745", action: Application_Info },
            { text: "Personal Info", color: "#17a2b8", action: Personal_Info },
            { text: "Overview", color: "#007bff", action: Overview },
            { text: "Stop All", color: "#dc3545", action: stopAllProcesses },
        ];

        buttons.forEach(btn => {
            let button = document.createElement("button");
            button.textContent = btn.text;
            button.style = `
                width: 100%;
                padding: 8px;
                border: none;
                border-radius: 4px;
                background-color: ${btn.color};
                color: white;
                cursor: pointer;
                font-size: 14px;
            `;
            button.addEventListener("click", btn.action);
            buttonContainer.appendChild(button);
        });

        container.appendChild(buttonContainer);

        // Make draggable
        let isDragging = false;
        let offsetX, offsetY;

        header.addEventListener("mousedown", (e) => {
            isDragging = true;
            offsetX = e.clientX - container.getBoundingClientRect().left;
            offsetY = e.clientY - container.getBoundingClientRect().top;
            container.style.cursor = "grabbing";
        });

        document.addEventListener("mousemove", (e) => {
            if (!isDragging) return;
            container.style.left = `${e.clientX - offsetX}px`;
            container.style.top = `${e.clientY - offsetY}px`;
        });

        document.addEventListener("mouseup", () => {
            isDragging = false;
            container.style.cursor = "grab";
        });

        document.body.appendChild(container);
    }

    // Combined Control Panel with CAPTCHA UI
    function createCombinedControlPanel() {
        const panel = document.createElement('div');
        panel.id = 'ivac-control-panel';
        Object.assign(panel.style, {
            position: 'fixed',
            top: '330px',
            left: '350px',
            zIndex: '10000',
            padding: '15px',
            backgroundColor: '#fff',
            border: '1px solid #ced4da',
            borderRadius: '6px',
            boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
            width: '320px',
            minHeight: 'auto'
        });

        // Panel Header
        const panelHeader = document.createElement('div');
        panelHeader.textContent = 'AbTon IVAC';
        Object.assign(panelHeader.style, {
            padding: '8px',
            backgroundColor: '#007bff',
            color: 'white',
            fontWeight: 'bold',
            textAlign: 'center',
            marginBottom: '15px',
            borderRadius: '4px',
            cursor: 'move',
            fontSize: '16px'
        });

        // Main Control Button
        const mainControlBtn = document.createElement('button');
        mainControlBtn.id = 'main-control-button';
        mainControlBtn.textContent = 'Start Full Automation';
        Object.assign(mainControlBtn.style, {
            padding: '10px',
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            fontWeight: 'bold',
            width: '100%',
            marginBottom: '15px',
            fontSize: '14px'
        });

        // OTP Section
        const otpSection = document.createElement('div');
        otpSection.innerHTML = '<div style="font-weight:bold; margin-bottom:8px;">OTP Controls</div>';
        otpSection.style.marginBottom = '15px';

        const otpRow1 = document.createElement('div');
        otpRow1.style.display = 'flex';
        otpRow1.style.justifyContent = 'space-between';
        otpRow1.style.marginBottom = '8px';

        const sendOtpBtn = document.createElement('button');
        sendOtpBtn.textContent = 'Send OTP';
        Object.assign(sendOtpBtn.style, {
            padding: '6px 12px',
            backgroundColor: '#17a2b8',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            width: '48%'
        });

        const stopOtpBtn = document.createElement('button');
        stopOtpBtn.textContent = 'Stop OTP';
        Object.assign(stopOtpBtn.style, {
            padding: '6px 12px',
            backgroundColor: '#dc3545',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            width: '48%',
            display: 'none'
        });

        otpRow1.appendChild(sendOtpBtn);
        otpRow1.appendChild(stopOtpBtn);

        const otpRow2 = document.createElement('div');
        otpRow2.style.display = 'flex';
        otpRow2.style.justifyContent = 'space-between';
        otpRow2.style.alignItems = 'center';

        const otpInput = document.createElement('input');
        otpInput.type = 'text';
        otpInput.placeholder = 'Enter OTP';
        Object.assign(otpInput.style, {
            padding: '6px',
            border: '1px solid #ced4da',
            borderRadius: '4px',
            width: '60%'
        });

        const verifyOtpBtn = document.createElement('button');
        verifyOtpBtn.textContent = 'Verify';
        Object.assign(verifyOtpBtn.style, {
            padding: '6px 12px',
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            width: '35%'
        });

        otpRow2.appendChild(otpInput);
        otpRow2.appendChild(verifyOtpBtn);

        otpSection.appendChild(otpRow1);
        otpSection.appendChild(otpRow2);

        // Appointment Section
        const apptSection = document.createElement('div');
        apptSection.innerHTML = '<div style="font-weight:bold; margin-bottom:8px;">Appointment</div>';
        apptSection.style.marginBottom = '15px';

        const dateRow = document.createElement('div');
        dateRow.style.display = 'flex';
        dateRow.style.justifyContent = 'space-between';
        dateRow.style.marginBottom = '8px';

        const dateInput = document.createElement('input');
        dateInput.type = 'date';
        Object.assign(dateInput.style, {
            padding: '6px',
            border: '1px solid #ced4da',
            borderRadius: '4px',
            width: '60%'
        });

        const fetchBtn = document.createElement('button');
        fetchBtn.textContent = 'Fetch Slots';
        Object.assign(fetchBtn.style, {
            padding: '6px 12px',
            backgroundColor: '#17a2b8',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            width: '35%'
        });

        dateRow.appendChild(dateInput);
        dateRow.appendChild(fetchBtn);

        const stopFetchBtn = document.createElement('button');
        stopFetchBtn.textContent = 'Stop Fetching';
        Object.assign(stopFetchBtn.style, {
            padding: '6px 12px',
            backgroundColor: '#dc3545',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            width: '100%',
            marginTop: '8px',
            display: 'none'
        });

        apptSection.appendChild(dateRow);
        apptSection.appendChild(stopFetchBtn);

        // Payment Section with CAPTCHA
        const paymentSection = document.createElement('div');
        paymentSection.innerHTML = '<div style="font-weight:bold; margin-bottom:8px;">Payment</div>';
        paymentSection.style.marginBottom = '15px';

        const paymentRow = document.createElement('div');
        paymentRow.style.display = 'flex';
        paymentRow.style.justifyContent = 'space-between';

        const captchaBtn = document.createElement('button');
        captchaBtn.textContent = 'Load CAPTCHA';
        Object.assign(captchaBtn.style, {
            padding: '6px 12px',
            backgroundColor: '#ffc107',
            color: '#212529',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            width: '48%'
        });

        const payNowBtn = document.createElement('button');
        payNowBtn.textContent = 'Pay Now';
        Object.assign(payNowBtn.style, {
            padding: '6px 12px',
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            width: '48%'
        });

        paymentRow.appendChild(captchaBtn);
        paymentRow.appendChild(payNowBtn);
        paymentSection.appendChild(paymentRow);

        // Status Display
        const statusDiv = document.createElement('div');
        statusDiv.id = 'ivac-status';
        Object.assign(statusDiv.style, {
            marginTop: '15px',
            padding: '8px',
            borderRadius: '4px',
            textAlign: 'center',
            display: 'none',
            fontSize: '14px',
            color: 'white'
        });

        // Message Display
        const messageDiv = document.createElement('div');
        messageDiv.id = 'ivac-message';
        Object.assign(messageDiv.style, {
            maxHeight: '150px',
            overflowY: 'auto',
            marginTop: '10px',
            padding: '8px',
            backgroundColor: '#f8f9fa',
            border: '1px solid #ddd',
            borderRadius: '4px',
            display: 'none',
            fontSize: '12px',
            whiteSpace: 'pre-wrap'
        });

        // Close Button
        const closeBtn = document.createElement('span');
        closeBtn.textContent = '✖';
        Object.assign(closeBtn.style, {
            position: 'absolute',
            top: '5px',
            right: '5px',
            cursor: 'pointer',
            fontWeight: 'bold',
            color: '#dc3545',
            fontSize: '16px'
        });

        // Draggable functionality
        let isDragging = false;
        let offsetX, offsetY;
        panelHeader.onmousedown = function(e) {
            isDragging = true;
            offsetX = e.clientX - panel.getBoundingClientRect().left;
            offsetY = e.clientY - panel.getBoundingClientRect().top;
            document.onmousemove = function(e) {
                if (!isDragging) return;
                panel.style.left = (e.clientX - offsetX) + 'px';
                panel.style.top = (e.clientY - offsetY) + 'px';
            };
            document.onmouseup = function() {
                isDragging = false;
                document.onmousemove = null;
            };
        };

        // Assemble panel
        panel.appendChild(closeBtn);
        panel.appendChild(panelHeader);
        panel.appendChild(mainControlBtn);
        panel.appendChild(otpSection);
        panel.appendChild(apptSection);
        panel.appendChild(paymentSection);
        panel.appendChild(statusDiv);
        panel.appendChild(messageDiv);
        document.body.appendChild(panel);


        function updateStatus(message, color) {
            statusDiv.textContent = message;
            statusDiv.style.backgroundColor = color;
            statusDiv.style.color = 'white';
            statusDiv.style.display = 'block';
        }

        function updateMessage(message) {
            messageDiv.textContent = typeof message === 'object' ? JSON.stringify(message, null, 2) : message;
            messageDiv.style.display = 'block';
        }

        // Main Control Button
        mainControlBtn.addEventListener("click", () => {
            isMainRunning = !isMainRunning;
            mainControlBtn.textContent = isMainRunning ? "Stop Automation" : "Start Full Automation";
            mainControlBtn.style.backgroundColor = isMainRunning ? "#dc3545" : "#28a745";
            if (isMainRunning) {
                console.clear();
                console.log("🚀 Automation started");
                startFullProcess();
            } else {
                console.log("🛑 Automation stopped");
            }
        });

        // OTP Functions
        async function sendOtpRequest(signal) {
            const token = getCsrfToken();
            if (!token) {
                updateStatus('❌ No token', '#dc3545');
                updateMessage('Error: CSRF token not found');
                return { success: false };
            }

            try {
                const res = await fetch('https://payment.ivacbd.com/pay-otp-sent', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        'Accept': '*/*',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: '_token=' + encodeURIComponent(token) + '&resend=0',
                    signal
                });

                if (!res.ok) {
                    const err = await res.json();
                    throw new Error(err.message || 'Server error: ' + res.status);
                }

                const result = await res.json();
                updateMessage(result.message);
                updateStatus(
                    result.success ? '✅ OTP Sent' : '⚠️ Failed',
                    result.success ? '#28a745' : '#dc3545'
                );
                return result;
            } catch (error) {
                if (error.name === 'AbortError') {
                    updateStatus('🛑 Aborted', '#dc3545');
                } else {
                    updateStatus('❌ ' + error.message, '#dc3545');
                    updateMessage(error.message);
                }
                return { success: false };
            }
        }

        // ✅ Manual one-click = one OTP send
        sendOtpBtn.onclick = async function () {
            sendOtpBtn.disabled = true;
            updateStatus('⏳ Sending OTP...', '#17a2b8');

            const abort = new AbortController();
            const result = await sendOtpRequest(abort.signal);

            updateStatus(
                result.success ? '✅ OTP Sent' : '❌ OTP Failed',
                result.success ? '#28a745' : '#dc3545'
            );

            sendOtpBtn.disabled = false;
        };


        // Verify OTP
        verifyOtpBtn.onclick = async function() {
            const otp = otpInput.value.trim();
            if (!otp) {
                updateStatus('⚠️ Enter OTP', '#ffc107');
                return;
            }

            const token = getCsrfToken();
            if (!token) {
                updateStatus('❌ No token', '#dc3545');
                return;
            }

            try {
                updateStatus('⏳ Verifying...', '#17a2b8');
                const response = await fetch('https://payment.ivacbd.com/pay-otp-verify', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        'Accept': '*/*',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: new URLSearchParams({
                        '_token': token,
                        'otp': otp
                    })
                });

                const result = await response.json();
                updateMessage(result);

                if (result.success) {
                    updateStatus('✅ Verified', '#28a745');
                    if (result.data?.slot_dates?.length > 0) {
                        selectedDate = result.data.slot_dates[0];
                        dateInput.value = selectedDate;
                    }
                } else {
                    updateStatus('❌ Failed', '#dc3545');
                }
            } catch (error) {
                updateStatus('❌ Error', '#dc3545');
                updateMessage(error.message);
            }
        };

        // Appointment Functions
        async function fetchSlots(signal) {
            const token = getCsrfToken();
            if (!token) {
                updateStatus('❌ No token', '#dc3545');
                return { success: false };
            }

            try {
                const response = await fetch('https://payment.ivacbd.com/pay-slot-time', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        'Accept': '*/*',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: `_token=${token}&appointment_date=${dateInput.value}`,
                    signal
                });

                const result = await response.json();
                updateMessage(result);

                if (result.success && result.data?.slot_times?.length > 0) {
                    updateStatus('✅ Slots found', '#28a745');
                    return result;
                } else {
                    updateStatus('⚠️ No slots', '#ffc107');
                    return { success: false };
                }
            } catch (error) {
                if (error.name === 'AbortError') {
                    updateStatus('🛑 Aborted', '#dc3545');
                } else {
                    updateStatus('❌ Error', '#dc3545');
                    updateMessage(error.message);
                }
                return { success: false };
            }
        }

        fetchBtn.onclick = async function () {
            fetchBtn.disabled = true;
            fetchBtn.textContent = 'Fetching...';
            updateStatus('⏳ Fetching Slots...', '#17a2b8');

            const abort = new AbortController();
            const result = await fetchSlots(abort.signal);

            updateStatus(
                result.success ? '✅ Slots found' : '⚠️ No slots or error',
                result.success ? '#28a745' : '#ffc107'
            );

            fetchBtn.disabled = false;
            fetchBtn.textContent = 'Fetch Slots';
        };


        // Payment Functions
        captchaBtn.onclick = function() {
            if (document.querySelector(".g-recaptcha")) {
                updateStatus('✅ CAPTCHA loaded', '#28a745');
                updateMessage('CAPTCHA already exists');
                return;
            }

            const captchaDiv = document.createElement("div");
            captchaDiv.className = "g-recaptcha";
            captchaDiv.setAttribute("data-sitekey", "6LdOCpAqAAAAAOLNB3Vwt_H7Nw4GGCAbdYm5Brsb");

            const script = document.createElement("script");
            script.src = "https://www.google.com/recaptcha/api.js";

            document.body.appendChild(captchaDiv);
            document.body.appendChild(script);

            updateStatus('✅ CAPTCHA loaded', '#28a745');
            updateMessage('CAPTCHA loaded successfully');


            // Position CAPTCHA div absolutely and make draggable
            captchaDiv.style.position = 'absolute';  // Ensure it's positioned absolutely
            captchaDiv.style.left = '50%';  // Start position (can be changed)
            captchaDiv.style.top = '50%';   // Start position (can be changed)
            // captchaDiv.style.cursor = 'grab'; // Change cursor to grab
            // captchaDiv.style.zIndex = '10001'; // Ensure it's above other elements

            // Make the CAPTCHA draggable
            let isDragging = false;
            let offsetX, offsetY;

            captchaDiv.addEventListener("mousedown", (e) => {
                isDragging = true;
                offsetX = e.clientX - captchaDiv.getBoundingClientRect().left;
                offsetY = e.clientY - captchaDiv.getBoundingClientRect().top;
                captchaDiv.style.cursor = "grabbing";
            });

            document.addEventListener("mousemove", (e) => {
                if (!isDragging) return;
                captchaDiv.style.left = `${e.clientX - offsetX}px`;
                captchaDiv.style.top = `${e.clientY - offsetY}px`;
            });

            document.addEventListener("mouseup", () => {
                isDragging = false;
                captchaDiv.style.cursor = "grab";
            });
        };

        payNowBtn.onclick = async function() {
            const token = getCsrfToken();
            if (!token) {
                updateStatus('❌ No token', '#dc3545');
                return;
            }

            const captchaResponse = document.querySelector(".g-recaptcha-response")?.value;
            if (!captchaResponse) {
                updateStatus('⚠️ Solve CAPTCHA', '#ffc107');
                return;
            }

            if (!selectedDate) {
                updateStatus('⚠️ Select date', '#ffc107');
                return;
            }

            updateStatus('⏳ Processing...', '#17a2b8');
            payNowBtn.disabled = true;

            try {
                const payload = new URLSearchParams({
                    '_token': token,
                    'appointment_date': selectedDate,
                    'appointment_time': '10',
                    'hash_param': captchaResponse,
                    'selected_payment[name]': 'VISA',
                    'selected_payment[slug]': 'visacard',
                    'selected_payment[link]': 'https://securepay.sslcommerz.com/gwprocess/v4/image/gw1/visa.png'
                });

                const response = await fetch("https://payment.ivacbd.com/paynow", {
                    method: "POST",
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: payload
                });

                const result = await response.json();

                if (result.success && result.url) {
                    updateStatus('✅ Redirecting...', '#28a745');
                    window.location.href = result.url;
                } else {
                    updateStatus('❌ Failed', '#dc3545');
                    updateMessage(result.message || "Payment failed");
                }
            } catch (error) {
                updateStatus('❌ Error', '#dc3545');
                updateMessage(error.message);
            } finally {
                payNowBtn.disabled = false;
            }
        };

        closeBtn.onclick = () => {
            messageDiv.style.display = 'none';
            statusDiv.style.display = 'none';
        };
    }

    // Initialization
    window.addEventListener('load', () => {
        createControlUI();
        createCombinedControlPanel();
        console.log("IVAC Automation Suite initialized!");
    });
})();
